{"version":3,"sources":["../node_modules/lodash/_baseSum.js","components/CollapsibleCard/index.tsx","views/Nft/market/Collection/Traits/styles.tsx","views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","views/Nft/market/Collection/Traits/utils.tsx","views/Nft/market/Collection/Traits/CollectionTraits.tsx","views/Nft/market/Collection/Traits/index.tsx","views/Nft/market/components/CollectibleCard/styles.tsx","../node_modules/lodash/sum.js","views/Nft/market/hooks/useGetLowestPrice.ts"],"names":["module","exports","array","iteratee","result","index","length","current","undefined","CollapsibleCard","initialOpenState","title","children","props","useState","isOpen","setIsOpen","p","alignItems","justifyContent","as","variant","scale","onClick","width","StyledSortButton","styled","button","theme","colors","secondary","TableWrapper","div","NftImage","Image","ClickableRow","tr","NftName","thumbnailSrc","name","src","height","mr","LowestPriceCell","bunnyId","useGetLowestPriceFromBunnyId","isFetching","lowestPrice","amount","PancakeBunniesTraits","collectionAddress","tokenApiResponse","setTokenApiResponse","raritySort","setRaritySort","t","useTranslation","push","useHistory","useEffect","a","getNftsFromCollectionApi","apiResponse","fetchTokens","totalMinted","sum","Object","values","attributesDistribution","sortedBunnieKeys","useMemo","keys","data","sort","bunnyIdA","bunnyIdB","bunnyCountA","bunnyCountB","sortBunniesByRarityBuilder","textAlign","type","currentValue","color","map","nft","count","percentage","nftsBaseUrl","image","thumbnail","formatNumber","times","bunnyCnt","CollectionTraits","useGetCollectionDistribution","traitType","total","traitValues","reduce","accum","traitValue","rarity","value","sortType","capitalize","mb","prevRaritySort","orderBy","Traits","useParams","dispatch","useAppDispatch","collection","useGetCollection","fetchCollection","Header","Container","py","pancakeBunniesAddress","BNBAmountLabel","mx","fontWeight","toLocaleString","minimumFractionDigits","maximumFractionDigits","CostLabel","cost","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","fontSize","MetaRow","maxWidth","ellipsis","StyledCollectibleCard","Card","mediaQueries","lg","LowestPriceMetaRow","baseSum","require","identity","getBunnyIdFromNft","attributes","find","attr","toString","setIsFetching","setLowestPrice","getNftsMarketData","otherId","isTradable","response","tokenMarketData","parseFloat","currentAskPrice","fetchLowestPrice","useGetLowestPriceFromNft","isPancakeBunny","toLowerCase","bunnyIdAttr"],"mappings":"+GAuBAA,EAAOC,QAdP,SAAiBC,EAAOC,GAKtB,IAJA,IAAIC,EACAC,GAAS,EACTC,EAASJ,EAAMI,SAEVD,EAAQC,GAAQ,CACvB,IAAIC,EAAUJ,EAASD,EAAMG,SACbG,IAAZD,IACFH,OAAoBI,IAAXJ,EAAuBG,EAAWH,EAASG,GAGxD,OAAOH,I,mRCiBMK,EApByC,SAAC,GAA4D,IAAD,IAAzDC,wBAAyD,SAAhCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAaC,EAAY,iBAClH,EAA4BC,mBAASJ,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAIA,OACE,eAAC,IAAD,2BAAUH,GAAV,cACE,cAAC,IAAD,CAAYI,EAAE,OAAd,SACE,eAAC,KAAD,CAAMC,WAAW,SAASC,eAAe,gBAAzC,UACE,cAAC,KAAD,CAASC,GAAG,KAAZ,SAAkBT,IAClB,cAAC,KAAD,CAAYU,QAAQ,OAAOC,MAAM,KAAKC,QAP3B,kBAAMP,GAAWD,IAO5B,SACGA,EAAS,cAAC,IAAD,CAAeS,MAAM,SAAY,cAAC,IAAD,CAAiBA,MAAM,gBAIvET,GAAUH,O,yCC5BJa,EAAmBC,IAAOC,OAAV,2HAIlB,qBAAGC,MAAkBC,OAAOC,aAI1BC,EAAeL,IAAOM,IAAV,4GAMZC,EAAWP,YAAOQ,KAAPR,CAAH,sFAORS,EAAeT,IAAOU,GAAV,2GAUZC,EAA4D,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAjB,OACvE,eAAC,KAAD,CAAMrB,WAAW,SAAjB,UACE,cAACe,EAAD,CAAUO,IAAKF,EAAcd,MAAO,GAAIiB,OAAQ,GAAIC,GAAG,QACvD,cAAC,KAAD,UAAOH,QCjBLI,EAAiD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACxD,EAAoCC,YAA6BD,GAAzDE,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAEpB,OAAID,EAEA,cAAC,KAAD,CAAM3B,eAAe,WAAWK,MAAM,QAAtC,SACE,cAAC,KAAD,CAAUiB,OAAO,OAAOjB,MAAM,WAK/BuB,EAIE,cAAC,IAAD,CAAgB5B,eAAe,WAAW6B,OAAQD,EAAavB,MAAM,UAHnE,MAwHIyB,EAlHmD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACnE,EAAgDpC,mBAAsC,MAAtF,mBAAOqC,EAAP,KAAyBC,EAAzB,KACA,EAAoCtC,mBAAmB,OAAvD,mBAAOuC,EAAP,KAAmBC,EAAnB,KACQC,EAAMC,cAAND,EACAE,EAASC,cAATD,KAERE,qBAAU,YACS,uCAAG,4BAAAC,EAAA,sEACQC,YAAyBX,GADjC,OACZY,EADY,OAElBV,EAAoBU,GAFF,2CAAH,qDAKjBC,KACC,CAACb,EAAmBE,IAEvB,IAAMY,EAAcb,EAAmBc,IAAIC,OAAOC,OAAOhB,EAAiBiB,yBAA2B,EAE/FC,EAAmBC,mBAAQ,WAC/B,OAAKnB,EAEEe,OAAOK,KAAKpB,EAAiBqB,MAAMC,KCnD5C,SAAC,GAAD,IAAGpB,EAAH,EAAGA,WAAYmB,EAAf,EAAeA,KAAf,OACA,SAACE,EAAUC,GAAc,IAAD,IAChBC,EAAW,UAAGJ,EAAKJ,uBAAuBM,UAA/B,QAA4C,EACvDG,EAAW,UAAGL,EAAKJ,uBAAuBO,UAA/B,QAA4C,EAE7D,MAAsB,QAAftB,EAAuBuB,EAAcC,EAAcA,EAAcD,GD8CzBE,CAA2B,CAAEzB,aAAYmB,KAAMrB,KAFhE,KAG7B,CAACE,EAAYF,IAMhB,OACE,mCACGA,EACC,cAAC,EAAD,CAAiBxC,MAAO4C,EAAE,YAA1B,SACE,cAACxB,EAAD,UACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAIgD,UAAU,OAAd,SAAsBxB,EAAE,UACxB,cAAC,KAAD,UAAKA,EAAE,WACP,cAAC,KAAD,UACE,cAAC9B,EAAD,CAAkBuD,KAAK,SAASzD,QAfzB,WACvB+B,GAAc,SAAC2B,GAAD,MAAoC,QAAjBA,EAAyB,OAAS,UAcnD,SACE,eAAC,KAAD,CAAM/D,WAAW,SAAjB,UACGqC,EAAE,UACa,QAAfF,EAAuB,cAAC,IAAD,CAAa6B,MAAM,cAAiB,cAAC,IAAD,CAAeA,MAAM,qBAIvF,cAAC,KAAD,CAAIH,UAAU,QAAd,SAAuBxB,EAAE,iBAG7B,gCACGc,EAAiBc,KAAI,SAACvC,GAAa,IAAD,EAC3BwC,EAAMjC,EAAiBqB,KAAK5B,GAClC,IAAKwC,EAEH,OAAO,KAET,IAAMC,EAAa,UAAGlC,EAAiBiB,uBAAuBxB,UAA3C,QAAuD,EACpE0C,EAAcD,EAAQrB,EAAe,IAK3C,OACE,eAAC7B,EAAD,CAA4BZ,QALV,WAClBkC,EAAK,GAAD,OAAI8B,IAAJ,wBAA+BrC,EAA/B,YAAoDN,KAINjC,MAAO4C,EAAE,qBAA3D,UACE,cAAC,KAAD,UACE,cAAC,EAAD,CAASjB,aAAc8C,EAAII,MAAMC,UAAWlD,KAAM6C,EAAI7C,SAExD,cAAC,KAAD,CAAIwC,UAAU,SAAd,SAAwBW,YAAaL,EAAO,EAAG,KAC/C,cAAC,KAAD,CAAIN,UAAU,SAAd,mBAA2BW,YAAaJ,EAAY,EAAG,GAAvD,OACA,cAAC,KAAD,CAAIP,UAAU,QAAQvD,MAAM,QAA5B,SACE,cAAC,EAAD,CAAiBoB,QAASA,QAPXA,eAiB/B,cAAC,EAAD,CAAiBjC,MAAO4C,EAAE,cAA1B,SACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAIwB,UAAU,OAAd,SAAsBxB,EAAE,UACxB,cAAC,KAAD,UAAKA,EAAE,WACP,cAAC,KAAD,UAAKA,EAAE,YACP,cAAC,KAAD,UAAKA,EAAE,iBAGX,gCACGoC,IAAM,IAAIR,KAAI,SAACS,GAAD,OACb,+BACE,cAAC,KAAD,UACE,eAAC,KAAD,CAAM1E,WAAW,SAAjB,UACE,cAAC,KAAD,CAAUuB,OAAO,OAAOjB,MAAM,OAAOkB,GAAG,QACxC,cAAC,KAAD,CAAUlB,MAAM,eAGpB,cAAC,KAAD,UACE,cAAC,KAAD,MAEF,cAAC,KAAD,UACE,cAAC,KAAD,QAXKoE,gB,8DEDVC,EAhH2C,SAAC,GAA2B,IAAzB3C,EAAwB,EAAxBA,kBAC3D,EAA6B4C,YAA6B5C,GAAlDsB,EAAR,EAAQA,KAAM1B,EAAd,EAAcA,WACd,EAAoChC,mBAAmC,IAAvE,mBAAOuC,EAAP,KAAmBC,EAAnB,KACQC,EAAMC,cAAND,EAER,OAAIT,EAEA,cAAC,EAAD,CAAiBnC,MAAO4C,EAAE,cAA1B,SACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAIwB,UAAU,OAAd,SAAsBxB,EAAE,UACxB,cAAC,KAAD,CAAI/B,MAAM,QAAV,SAAmB+B,EAAE,WACrB,cAAC,KAAD,CAAI/B,MAAM,QAAV,SAAmB+B,EAAE,iBAGzB,gCACGoC,IAAM,IAAIR,KAAI,SAACS,GAAD,OACb,+BACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAUpE,MAAM,YAElB,cAAC,KAAD,UACE,cAAC,KAAD,MAEF,cAAC,KAAD,UACE,cAAC,KAAD,QARKoE,aAmBnB,mCACGpB,GACCN,OAAOK,KAAKC,GAAMW,KAAI,SAACY,EAAW1F,GAChC,IAAM2F,EAAQ/B,IAAIC,OAAOC,OAAOK,EAAKuB,KAG/BE,EAAkE/B,OAAOK,KAAKC,EAAKuB,IAAYG,QACnG,SAACC,EAAOC,GACN,IAAMf,EAAQb,EAAKuB,GAAWK,GACxBC,EAAUhB,EAAQW,EAAS,IAEjC,MAAM,GAAN,mBAAWG,GAAX,CAAkB,CAAEG,MAAOF,EAAYf,QAAOgB,cAEhD,IAEIE,EAAWlD,EAAW0C,IAAc,OAkB1C,OACE,cAAC,EAAD,CAAiCpF,MAAO6F,IAAWT,GAAYrF,iBAAkBL,GAAS,EAAGoG,GAAG,OAAhG,SACE,cAAC1E,EAAD,UACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAIgD,UAAU,OAAd,SAAsBxB,EAAE,UACxB,cAAC,KAAD,CAAI/B,MAAM,QAAV,SAAmB+B,EAAE,WACrB,cAAC,KAAD,CAAI/B,MAAM,QAAV,SACE,cAACC,EAAD,CAAkBuD,KAAK,SAASzD,QAzBrB,WACvB+B,GAAc,SAACoD,GACb,OAAKA,EAAeX,GAOb,2BACFW,GADL,kBAEGX,EAA0C,QAA9BW,EAAeX,GAAuB,OAAS,QARrD,2BACFW,GADL,kBAEGX,EAAY,YAoBP,SACE,eAAC,KAAD,CAAM7E,WAAW,SAAjB,UACGqC,EAAE,UACwB,QAA1BF,EAAW0C,GACV,cAAC,IAAD,CAAab,MAAM,cAEnB,cAAC,IAAD,CAAeA,MAAM,0BAOjC,gCACGyB,IAAQV,EAAa,SAAUM,GAAUpB,KAAI,YAA+B,IAA5BmB,EAA2B,EAA3BA,MAAOjB,EAAoB,EAApBA,MAAOgB,EAAa,EAAbA,OAC7D,OACE,+BACE,cAAC,KAAD,UAAKG,IAAWF,KAChB,cAAC,KAAD,CAAIvB,UAAU,SAAd,SAAwBW,YAAaL,EAAO,EAAG,KAC/C,cAAC,KAAD,CAAIN,UAAU,SAAd,mBAA2BW,YAAaW,EAAQ,EAAG,GAAnD,SAHOC,cAxBCP,SCpDnBa,UAzBA,WACb,IAAQ1D,EAAsB2D,cAAtB3D,kBACF4D,EAAWC,cACXC,EAAaC,YAAiB/D,GAQpC,OANAS,qBAAU,WACJT,GACF4D,EAASI,YAAgBhE,MAE1B,CAACA,EAAmB4D,IAGrB,qCACE,cAACK,EAAA,EAAD,CAAQH,WAAYA,IACpB,cAACI,EAAA,EAAD,CAAWC,GAAG,OAAd,SACGnE,IAAsBoE,IACrB,cAAC,EAAD,CAAsBpE,kBAAmBA,IAEzC,cAAC,EAAD,CAAkBA,kBAAmBA,W,iVCAlCqE,EAAgD,SAAC,GAAD,IAAGvE,EAAH,EAAGA,OAAWnC,EAAd,wBAC3D,eAAC,KAAD,yBAAMK,WAAW,UAAaL,GAA9B,cACE,cAAC,IAAD,CAAaW,MAAM,OAAOgG,GAAG,QAC7B,cAAC,KAAD,CAAMC,WAAW,MAAjB,SACGzE,EAAO0E,oBAAelH,EAAW,CAChCmH,sBAAuB,EACvBC,sBAAuB,WAWlBC,EAAsC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,aAAiBlH,EAAY,iBACjFmH,EAAaC,YAAsBF,EAAcD,GAEvD,OACE,eAAC,KAAD,yBAAM5G,WAAW,UAAaL,GAA9B,cACGmH,EAAa,GACZ,cAAC,KAAD,CAAME,SAAS,OAAOhD,MAAM,aAA5B,qBAA+C8C,EAAWN,oBAAelH,EAAW,CAClFmH,sBAAuB,EACvBC,sBAAuB,IAFzB,OAKF,cAACL,EAAD,CAAgBvE,OAAQ8E,SASjBK,EAAkC,SAAC,GAAD,IAAGxH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAaC,EAAvB,wBAC7C,eAAC,KAAD,yBAAMK,WAAW,SAASC,eAAe,iBAAoBN,GAA7D,cACE,cAAC,KAAD,CAAMqH,SAAS,OAAOhD,MAAM,aAAakD,SAAS,QAAQC,UAAQ,EAAC1H,MAAOA,EAA1E,SACGA,IAEH,cAAC,IAAD,UAAMC,SAgDG0H,EAAwB5G,YAAO6G,IAAP7G,CAAH,sOAS9B,qBAAGE,MAAkB4G,aAAaC,MAazBC,EAAqB,SAAC,GAAwE,IAAtE3F,EAAqE,EAArEA,YAAaD,EAAwD,EAAxDA,WAAYiF,EAA4C,EAA5CA,aACpDxE,EAAMC,cAAND,EAER,OAAKT,GAAeC,EAKlB,cAACoF,EAAD,CAASxH,MAAO4C,EAAE,gBAAlB,SACGT,EACC,cAAC,KAAD,CAAUL,OAAO,OAAOjB,MAAM,SAE9B,cAACqG,EAAD,CAAWC,KAAM/E,EAAagF,aAAcA,MARzC,O,oBCjJX,IAAIY,EAAUC,EAAQ,MAClBC,EAAWD,EAAQ,KAsBvB5I,EAAOC,QANP,SAAaC,GACX,OAAQA,GAASA,EAAMI,OACnBqI,EAAQzI,EAAO2I,GACf,I,gKCVAC,EAAoB,SAAC1D,GAA2B,IAAD,IAC7CxC,EAAO,UAAGwC,EAAI2D,kBAAP,iBAAG,EAAgBC,MAAK,SAACC,GAAD,MAA6B,YAAnBA,EAAKlD,oBAAvC,aAAG,EAA8DO,MAC9E,OAAO1D,EAAUA,EAAQsG,WAAa,MAG3BrG,EAA+B,SAACD,GAC3C,MAAoC9B,oBAAkB,GAAtD,mBAAOgC,EAAP,KAAmBqG,EAAnB,KACA,EAAsCrI,mBAAiB,MAAvD,mBAAOiC,EAAP,KAAoBqG,EAApB,KAsBA,OApBAzF,qBAAU,WAeJf,GAdkB,uCAAG,gCAAAgB,EAAA,sEAErBuF,GAAc,GAFO,SAGEE,YAAkB,CAAEC,QAAS1G,EAAS2G,YAAY,GAAQ,EAAG,kBAAmB,OAHlF,QAGfC,EAHe,QAKRlJ,OAAS,IAAI,EAAD,YACGkJ,EADH,GAChBC,EADgB,KAEvBL,EAAeM,WAAWD,EAAgBE,mBAPvB,uBAUrBR,GAAc,GAVO,uEAAH,oDAepBS,KAED,CAAChH,IAEG,CAAEE,aAAYC,gBAGV8G,EAA2B,SAACzE,GAAmC,IAAD,EACzE,EAAoCtE,oBAAkB,GAAtD,mBAAOgC,EAAP,KAAmBqG,EAAnB,KACA,EAAsCrI,mBAAiB,MAAvD,mBAAOiC,EAAP,KAAoBqG,EAApB,KACMU,GAAiB,UAAA1E,EAAIlC,yBAAJ,eAAuB6G,iBAAkBzC,IAAsByC,cA4BtF,OA1BApG,qBAAU,WAqBJmG,GAAkB1E,GApBA,uCAAG,kCAAAxB,EAAA,6DACjBoG,EAAclB,EAAkB1D,GADf,SAGrB+D,GAAc,GAHO,SAIEE,YACrB,CAAEC,QAASU,EAAaT,YAAY,GACpC,EACA,kBACA,OARmB,QAIfC,EAJe,QAWRlJ,OAAS,IAAI,EAAD,YACGkJ,EADH,GAChBC,EADgB,KAEvBL,EAAeM,WAAWD,EAAgBE,mBAbvB,uBAgBrBR,GAAc,GAhBO,yEAAH,oDAqBpBS,KAED,CAACE,EAAgB1E,IAEb,CAAEtC,aAAYC","file":"static/js/26.a43c1e9d.chunk.js","sourcesContent":["/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import React, { useState } from 'react'\r\nimport {\r\n  CardProps,\r\n  CardHeader,\r\n  Card,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n} from '@pancakeswap/uikit'\r\n\r\ninterface CollapsibleCardProps extends CardProps {\r\n  initialOpenState?: boolean\r\n  title: string\r\n}\r\n\r\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\r\n  const [isOpen, setIsOpen] = useState(initialOpenState)\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Heading as=\"h3\">{title}</Heading>\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\r\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\r\n          </IconButton>\r\n        </Flex>\r\n      </CardHeader>\r\n      {isOpen && children}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CollapsibleCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\r\n\r\nexport const StyledSortButton = styled.button`\r\n  border: none;\r\n  cursor: pointer;\r\n  background: none;\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  font-weight: bold;\r\n`\r\n\r\nexport const TableWrapper = styled.div`\r\n  -webkit-overflow-scrolling: touch;\r\n  min-width: 320px;\r\n  overflow-x: auto;\r\n`\r\n\r\nexport const NftImage = styled(Image)`\r\n  flex: none;\r\n  & > img {\r\n    border-radius: 8px;\r\n  }\r\n`\r\n\r\nexport const ClickableRow = styled.tr`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    td {\r\n      opacity: 0.65;\r\n    }\r\n  }\r\n`\r\n\r\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\r\n  <Flex alignItems=\"center\">\r\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\r\n    <Text>{name}</Text>\r\n  </Flex>\r\n)\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useHistory } from 'react-router'\r\nimport times from 'lodash/times'\r\nimport sum from 'lodash/sum'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\r\nimport { ApiResponseCollectionTokens } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollapsibleCard from 'components/CollapsibleCard'\r\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\r\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\r\nimport { sortBunniesByRarityBuilder } from './utils'\r\nimport { nftsBaseUrl } from '../../constants'\r\nimport { SortType } from '../../types'\r\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\r\n\r\ninterface PancakeBunniesTraitsProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\r\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\r\n        <Skeleton height=\"24px\" width=\"48px\" />\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  if (!lowestPrice) {\r\n    return null\r\n  }\r\n\r\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\r\n}\r\n\r\nconst PancakeBunniesTraits: React.FC<PancakeBunniesTraitsProps> = ({ collectionAddress }) => {\r\n  const [tokenApiResponse, setTokenApiResponse] = useState<ApiResponseCollectionTokens>(null)\r\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\r\n  const { t } = useTranslation()\r\n  const { push } = useHistory()\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\r\n      setTokenApiResponse(apiResponse)\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setTokenApiResponse])\r\n\r\n  const totalMinted = tokenApiResponse ? sum(Object.values(tokenApiResponse.attributesDistribution)) : 0\r\n\r\n  const sortedBunnieKeys = useMemo(() => {\r\n    if (!tokenApiResponse) return []\r\n\r\n    return Object.keys(tokenApiResponse.data).sort(sortBunniesByRarityBuilder({ raritySort, data: tokenApiResponse }))\r\n  }, [raritySort, tokenApiResponse])\r\n\r\n  const toggleRaritySort = () => {\r\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {tokenApiResponse ? (\r\n        <CollapsibleCard title={t('Bunny Id')}>\r\n          <TableWrapper>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <Th textAlign=\"left\">{t('Name')}</Th>\r\n                  <Th>{t('Count')}</Th>\r\n                  <Th>\r\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\r\n                      <Flex alignItems=\"center\">\r\n                        {t('Rarity')}\r\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\r\n                      </Flex>\r\n                    </StyledSortButton>\r\n                  </Th>\r\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {sortedBunnieKeys.map((bunnyId) => {\r\n                  const nft = tokenApiResponse.data[bunnyId]\r\n                  if (!nft) {\r\n                    // Some bunnies don't exist on testnet\r\n                    return null\r\n                  }\r\n                  const count: number = tokenApiResponse.attributesDistribution[bunnyId] ?? 0\r\n                  const percentage = (count / totalMinted) * 100\r\n                  const handleClick = () => {\r\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${bunnyId}`)\r\n                  }\r\n\r\n                  return (\r\n                    <ClickableRow key={bunnyId} onClick={handleClick} title={t('Click to view NFT')}>\r\n                      <Td>\r\n                        <NftName thumbnailSrc={nft.image.thumbnail} name={nft.name} />\r\n                      </Td>\r\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\r\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\r\n                      <Td textAlign=\"right\" width=\"100px\">\r\n                        <LowestPriceCell bunnyId={bunnyId} />\r\n                      </Td>\r\n                    </ClickableRow>\r\n                  )\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </TableWrapper>\r\n        </CollapsibleCard>\r\n      ) : (\r\n        <CollapsibleCard title={t('Loading...')}>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th textAlign=\"left\">{t('Name')}</Th>\r\n                <Th>{t('Count')}</Th>\r\n                <Th>{t('Rarity')}</Th>\r\n                <Th>{t('Lowest')}</Th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {times(19).map((bunnyCnt) => (\r\n                <tr key={bunnyCnt}>\r\n                  <Td>\r\n                    <Flex alignItems=\"center\">\r\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\r\n                      <Skeleton width=\"100px\" />\r\n                    </Flex>\r\n                  </Td>\r\n                  <Td>\r\n                    <Skeleton />\r\n                  </Td>\r\n                  <Td>\r\n                    <Skeleton />\r\n                  </Td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </CollapsibleCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PancakeBunniesTraits\r\n","import { ApiResponseCollectionTokens } from 'state/nftMarket/types'\r\n\r\ntype sortBuilder = {\r\n  data: ApiResponseCollectionTokens\r\n  raritySort: string\r\n}\r\n\r\nexport const sortBunniesByRarityBuilder =\r\n  ({ raritySort, data }: sortBuilder) =>\r\n  (bunnyIdA, bunnyIdB) => {\r\n    const bunnyCountA = data.attributesDistribution[bunnyIdA] ?? 0\r\n    const bunnyCountB = data.attributesDistribution[bunnyIdB] ?? 0\r\n\r\n    return raritySort === 'asc' ? bunnyCountA - bunnyCountB : bunnyCountB - bunnyCountA\r\n  }\r\n","import React, { useState } from 'react'\r\nimport times from 'lodash/times'\r\nimport capitalize from 'lodash/capitalize'\r\nimport sum from 'lodash/sum'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport CollapsibleCard from 'components/CollapsibleCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { SortType } from '../../types'\r\nimport { StyledSortButton, TableWrapper } from './styles'\r\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\r\n\r\ninterface CollectionTraitsProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\r\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\r\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\r\n  const { t } = useTranslation()\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <CollapsibleCard title={t('Loading...')}>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <Th textAlign=\"left\">{t('Name')}</Th>\r\n              <Th width=\"100px\">{t('Count')}</Th>\r\n              <Th width=\"160px\">{t('Rarity')}</Th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {times(19).map((bunnyCnt) => (\r\n              <tr key={bunnyCnt}>\r\n                <Td>\r\n                  <Skeleton width=\"100px\" />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton />\r\n                </Td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </CollapsibleCard>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {data &&\r\n        Object.keys(data).map((traitType, index) => {\r\n          const total = sum(Object.values(data[traitType]))\r\n\r\n          // Parse the distribution values into an array to make it easier to sort\r\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\r\n            (accum, traitValue) => {\r\n              const count = data[traitType][traitValue]\r\n              const rarity = (count / total) * 100\r\n\r\n              return [...accum, { value: traitValue, count, rarity }]\r\n            },\r\n            [],\r\n          )\r\n          const sortType = raritySort[traitType] || 'desc'\r\n\r\n          const toggleRaritySort = () => {\r\n            setRaritySort((prevRaritySort) => {\r\n              if (!prevRaritySort[traitType]) {\r\n                return {\r\n                  ...prevRaritySort,\r\n                  [traitType]: 'asc',\r\n                }\r\n              }\r\n\r\n              return {\r\n                ...prevRaritySort,\r\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\r\n              }\r\n            })\r\n          }\r\n\r\n          return (\r\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\r\n              <TableWrapper>\r\n                <Table>\r\n                  <thead>\r\n                    <tr>\r\n                      <Th textAlign=\"left\">{t('Name')}</Th>\r\n                      <Th width=\"100px\">{t('Count')}</Th>\r\n                      <Th width=\"160px\">\r\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\r\n                          <Flex alignItems=\"center\">\r\n                            {t('Rarity')}\r\n                            {raritySort[traitType] === 'asc' ? (\r\n                              <ArrowUpIcon color=\"secondary\" />\r\n                            ) : (\r\n                              <ArrowDownIcon color=\"secondary\" />\r\n                            )}\r\n                          </Flex>\r\n                        </StyledSortButton>\r\n                      </Th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\r\n                      return (\r\n                        <tr key={value}>\r\n                          <Td>{capitalize(value)}</Td>\r\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\r\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </TableWrapper>\r\n            </CollapsibleCard>\r\n          )\r\n        })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionTraits\r\n","import React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport Container from 'components/Layout/Container'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { fetchCollection } from 'state/nftMarket/reducer'\r\nimport Header from '../Header'\r\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport CollectionTraits from './CollectionTraits'\r\n\r\nconst Traits = () => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const dispatch = useAppDispatch()\r\n  const collection = useGetCollection(collectionAddress)\r\n\r\n  useEffect(() => {\r\n    if (collectionAddress) {\r\n      dispatch(fetchCollection(collectionAddress))\r\n    }\r\n  }, [collectionAddress, dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Header collection={collection} />\r\n      <Container py=\"40px\">\r\n        {collectionAddress === pancakeBunniesAddress ? (\r\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\r\n        ) : (\r\n          <CollectionTraits collectionAddress={collectionAddress} />\r\n        )}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Traits\r\n","import React, { ReactElement } from 'react'\r\nimport {\r\n  Card,\r\n  BinanceIcon,\r\n  Box,\r\n  BoxProps,\r\n  CameraIcon,\r\n  Flex,\r\n  FlexProps,\r\n  SellIcon,\r\n  Text,\r\n  WalletFilledIcon,\r\n  Skeleton,\r\n} from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport styled from 'styled-components'\r\n\r\nexport const Footer: React.FC<BoxProps> = ({ children, ...props }) => (\r\n  <Box borderTop={[null, null, null, '1px solid']} borderColor=\"cardBorder\" pt=\"8px\" {...props}>\r\n    {children}\r\n  </Box>\r\n)\r\n\r\ninterface BNBAmountLabelProps extends FlexProps {\r\n  amount: number\r\n}\r\n\r\nexport const BNBAmountLabel: React.FC<BNBAmountLabelProps> = ({ amount, ...props }) => (\r\n  <Flex alignItems=\"center\" {...props}>\r\n    <BinanceIcon width=\"16px\" mx=\"4px\" />\r\n    <Text fontWeight=\"600\">\r\n      {amount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 4,\r\n      })}\r\n    </Text>\r\n  </Flex>\r\n)\r\n\r\ninterface CostLabelProps extends FlexProps {\r\n  cost: number\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nexport const CostLabel: React.FC<CostLabelProps> = ({ cost, bnbBusdPrice, ...props }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, cost)\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" {...props}>\r\n      {priceInUsd > 0 && (\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">{`($${priceInUsd.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}</Text>\r\n      )}\r\n      <BNBAmountLabel amount={cost} />\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface MetaRowProps extends FlexProps {\r\n  title: string\r\n}\r\n\r\nexport const MetaRow: React.FC<MetaRowProps> = ({ title, children, ...props }) => (\r\n  <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" maxWidth=\"120px\" ellipsis title={title}>\r\n      {title}\r\n    </Text>\r\n    <Box>{children}</Box>\r\n  </Flex>\r\n)\r\n\r\nexport interface NftTagProps extends FlexProps {\r\n  icon?: ReactElement\r\n  color?: string\r\n}\r\n\r\nexport const NftTag: React.FC<NftTagProps> = ({ icon, color = 'text', children, ...props }) => (\r\n  <Flex display=\"inline-flex\" alignItems=\"center\" height=\"24px\" {...props}>\r\n    {icon}\r\n    <Text color={color} fontSize=\"14px\" fontWeight=\"600\">\r\n      {children}\r\n    </Text>\r\n  </Flex>\r\n)\r\n\r\nexport const ProfileNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<CameraIcon mr=\"4px\" width=\"16px\" color=\"textSubtle\" />} color=\"textSubtle\" {...props}>\r\n      {t('Profile')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const WalletNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<WalletFilledIcon mr=\"4px\" width=\"16px\" color=\"secondary\" />} color=\"secondary\" {...props}>\r\n      {t('Wallet')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const SellingNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<SellIcon mr=\"4px\" width=\"16px\" color=\"failure\" />} color=\"failure\" {...props}>\r\n      {t('Selling')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const StyledCollectibleCard = styled(Card)`\r\n  border-radius: 8px;\r\n  max-width: 320px;\r\n  transition: opacity 200ms;\r\n\r\n  & > div {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    &:hover {\r\n      cursor: pointer;\r\n      opacity: 0.6;\r\n    }\r\n  }\r\n`\r\ninterface LowestPriceMetaRowProps {\r\n  lowestPrice: number\r\n  isFetching: boolean\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nexport const LowestPriceMetaRow = ({ lowestPrice, isFetching, bnbBusdPrice }: LowestPriceMetaRowProps) => {\r\n  const { t } = useTranslation()\r\n\r\n  if (!isFetching && !lowestPrice) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <MetaRow title={t('Lowest price')}>\r\n      {isFetching ? (\r\n        <Skeleton height=\"24px\" width=\"30px\" />\r\n      ) : (\r\n        <CostLabel cost={lowestPrice} bnbBusdPrice={bnbBusdPrice} />\r\n      )}\r\n    </MetaRow>\r\n  )\r\n}\r\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","import { useEffect, useState } from 'react'\r\nimport { getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\nexport interface LowestNftPrice {\r\n  isFetching: boolean\r\n  lowestPrice: number\r\n}\r\n\r\nconst getBunnyIdFromNft = (nft: NftToken): string => {\r\n  const bunnyId = nft.attributes?.find((attr) => attr.traitType === 'bunnyId')?.value\r\n  return bunnyId ? bunnyId.toString() : null\r\n}\r\n\r\nexport const useGetLowestPriceFromBunnyId = (bunnyId: string): LowestNftPrice => {\r\n  const [isFetching, setIsFetching] = useState<boolean>(false)\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      try {\r\n        setIsFetching(true)\r\n        const response = await getNftsMarketData({ otherId: bunnyId, isTradable: true }, 1, 'currentAskPrice', 'asc')\r\n\r\n        if (response.length > 0) {\r\n          const [tokenMarketData] = response\r\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\r\n        }\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (bunnyId) {\r\n      fetchLowestPrice()\r\n    }\r\n  }, [bunnyId])\r\n\r\n  return { isFetching, lowestPrice }\r\n}\r\n\r\nexport const useGetLowestPriceFromNft = (nft: NftToken): LowestNftPrice => {\r\n  const [isFetching, setIsFetching] = useState<boolean>(false)\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const isPancakeBunny = nft.collectionAddress?.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const bunnyIdAttr = getBunnyIdFromNft(nft)\r\n      try {\r\n        setIsFetching(true)\r\n        const response = await getNftsMarketData(\r\n          { otherId: bunnyIdAttr, isTradable: true },\r\n          1,\r\n          'currentAskPrice',\r\n          'asc',\r\n        )\r\n\r\n        if (response.length > 0) {\r\n          const [tokenMarketData] = response\r\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\r\n        }\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (isPancakeBunny && nft) {\r\n      fetchLowestPrice()\r\n    }\r\n  }, [isPancakeBunny, nft])\r\n\r\n  return { isFetching, lowestPrice }\r\n}\r\n"],"sourceRoot":""}